name: Run Kaggle Notebook and Expose Ollama API

on:
  workflow_dispatch: # Permite acionamento manual

jobs:
  deploy_and_run_kaggle_notebook:
    runs-on: ubuntu-latest
    outputs:
      ngrok_url: ${{ steps.retrieve_ngrok_url.outputs.NGROK_URL_OUTPUT }}
    env:
      NGROK_AUTHTOKEN_USER: ${{ secrets.NGROK_AUTHTOKEN_USER }}
      KAGGLE_USER_FOR_SLUG: "bgzinn"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Kaggle CLI
        run: pip install kaggle

      - name: Configure Kaggle API credentials
        run: |
          mkdir -p ~/.kaggle
          printf "%s" '{"username":"bgzinn","key":"55824846e3fff4618538582c58e4969a"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Create kernel metadata file
        id: kernel_meta
        run: |
          KERNEL_SLUG="${{ env.KAGGLE_USER_FOR_SLUG }}/ollama-qwen3-14b-runner"
          echo "KERNEL_SLUG_ENV=$KERNEL_SLUG" >> "$GITHUB_ENV"
          cat > create_metadata.py << 'EOF'
import json
import os

kernel_slug = os.environ['KERNEL_SLUG_ENV']
metadata = {
    'id': kernel_slug,
    'title': 'Ollama Qwen3 14B Runner',
    'code_file': 'ollama_kaggle_runner.ipynb',
    'language': 'python',
    'kernel_type': 'notebook',
    'is_private': True,
    'enable_gpu': True,
    'enable_internet': True,
    'dataset_sources': [],
    'competition_sources': [],
    'kernel_sources': []
}

with open('kernel-metadata.json', 'w') as f:
    json.dump(metadata, f, indent=2)

print(f'kernel-metadata.json created for kernel {kernel_slug} using Python json.dump')
EOF
          python3 create_metadata.py
          echo "Debug: Contents of kernel-metadata.json:"
          cat kernel-metadata.json

      - name: Push and run Kaggle Notebook
        run: |
          if [ ! -f ollama_kaggle_runner.ipynb ]; then
            echo "ERROR: ollama_kaggle_runner.ipynb not found in the repository root."
            exit 1
          fi
          kaggle kernels push -p ./

      - name: Wait for notebook to initialize and retrieve Ngrok URL
        id: retrieve_ngrok_url
        run: |
          echo "Waiting for Kaggle notebook to start and generate Ngrok URL (this might take 10-15 minutes)..."
          sleep 900 # 15 minutos de espera
          echo "Attempting to retrieve Ngrok URL from kernel output..."
          mkdir -p ./kaggle_output
          for i in {1..3}
          do
            echo "Attempt $i to download kernel output..."
            if kaggle kernels output -k "${{ env.KERNEL_SLUG_ENV }}" -p ./kaggle_output --force; then
              if [ -f ./kaggle_output/ngrok_url.txt ]; then
                NGROK_URL=$(cat ./kaggle_output/ngrok_url.txt | tr -d '[:space:]')
                if [ -n "$NGROK_URL" ]; then
                  echo "NGROK_URL_OUTPUT=$NGROK_URL" >> "$GITHUB_OUTPUT"
                  echo "Successfully retrieved Ngrok URL: $NGROK_URL"
                  exit 0
                fi
              fi
            fi
            sleep 60
          done
          echo "Error: Failed to retrieve Ngrok URL after multiple attempts."
        env:
          KERNEL_SLUG_ENV: ${{ env.KERNEL_SLUG_ENV }}

      - name: Display Ngrok URL
        run: echo "For direct access in this step (if needed): ${{ steps.retrieve_ngrok_url.outputs.NGROK_URL_OUTPUT }}"
